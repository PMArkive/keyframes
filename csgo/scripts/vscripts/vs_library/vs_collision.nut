//-----------------------------------------------------------------------
//------------------- Copyright (c) samisalreadytaken -------------------
//-----------------------------------------------------------------------
if(!("VectorTransform"in VS))Assert(0,"vs_math2 not found");;if("IsBoxIntersectingRay"in VS)return;;class ::Ray_t{m_Start=null;m_Delta=null;m_StartOffset=null;m_Extents=null;m_IsRay=null;m_IsSwept=null;function Init(start,end,mins=null,maxs=null):(Vector){m_Delta=end-start;m_IsSwept=(m_Delta.LengthSqr()!=0.0);if(!mins){m_Extents=Vector();m_IsRay=true;m_StartOffset=Vector();m_Start=Vector(start.x,start.y,start.z)}else{m_Extents=(maxs-mins)*0.5;m_IsRay=(m_Extents.LengthSqr()<1.e-6);m_StartOffset=(mins+maxs)*0.5;m_Start=start+m_StartOffset;m_StartOffset*=-1.0}}}local InvRSquared=VS.InvRSquared,VectorMA=VS.VectorMA;function VS::Collision_ClearTrace(rayS,rayD,tr){tr.startpos=rayS;tr.endpos=rayS;tr.endpos+=rayD;tr.fraction=1.0}function VS::ComputeBoxOffset(ray):(fabs,InvRSquared){if(ray.m_IsRay)return 1.e-3;return(fabs(ray.m_Extents.x*ray.m_Delta.x)+fabs(ray.m_Extents.y*ray.m_Delta.y)+fabs(ray.m_Extents.z*ray.m_Delta.z))*InvRSquared(ray.m_Delta)+1.e-3}function VS::IsPointInCone(pt,org,axis,a,len){local dt=pt-org;local ds=dt.Norm();local dot=dt.Dot(axis);if(dot<a)return false;if(ds*dot>len)return false;return true}function VS::IsSphereIntersectingSphere(c1,r1,c2,r2){local rs=r1+r2;return((c2-c1).LengthSqr()<=(rs*rs))}function VS::IsBoxIntersectingSphere(mins,maxs,org,fR){local dt,dm=0.0;if(org.x<mins.x){dt=org.x-mins.x;dm+=dt*dt}else if(org.x>maxs.x){dt=maxs.x-org.x;dm+=dt*dt};;if(org.y<mins.y){dt=org.y-mins.y;dm+=dt*dt}else if(org.y>maxs.y){dt=maxs.y-org.y;dm+=dt*dt};;if(org.z<mins.z){dt=org.z-mins.z;dm+=dt*dt}else if(org.z>maxs.z){dt=maxs.z-org.z;dm+=dt*dt};;return dm<fR*fR}function VS::IsCircleIntersectingRectangle(mins,maxs,org,fR){local dt,dm=0.0;if(org.x<mins.x){dt=org.x-mins.x;dm+=dt*dt}else if(org.x>maxs.x){dt=maxs.x-org.x;dm+=dt*dt};;if(org.y<mins.y){dt=org.y-mins.y;dm+=dt*dt}else if(org.y>maxs.y){dt=maxs.y-org.y;dm+=dt*dt};;return dm<fR*fR}function VS::IsRayIntersectingSphere(rayS,rayD,org,fR,flT=0.0):(VectorMA){fR+=flT;local vd=org-rayS;local fn=vd.Dot(rayD);local t;if(fn<=0.0){t=0.0}else{local fd=rayD.Dot(rayD);if(fn>fd)t=1.0;else t=fn/fd};local vp=VectorMA(rayS,t,rayD);return((vp-org).LengthSqr()<=fR*fR)}function VS::IntersectInfiniteRayWithSphere(rayS,rayD,org,fR,pT):(sqrt){local vd=rayS-org;local a=rayD.Dot(rayD);if(!a){pT[0]=pT[1]=0.0;return vd.LengthSqr()<=fR*fR};local b=2.0*vd.Dot(rayD);local c=vd.Dot(vd)-fR*fR;local fd=b*b-4*a*c;if(fd<0.0)return false;fd=sqrt(fd);local oo2a=0.5/a;pT[0]=(-b-fd)*oo2a;pT[1]=(-b+fd)*oo2a;return true}function VS::IsBoxIntersectingRay(mins,maxs,org,vDt,flT=0.0):(fabs){local tmin=FLT_MIN,tmax=FLT_MAX;if(fabs(vDt.x)<1.e-8){if((org.x<mins.x-flT)||(org.x>maxs.x+flT))return false}else{local dtI=1.0/vDt.x;local t1=(mins.x-flT-org.x)*dtI;local t2=(maxs.x+flT-org.x)*dtI;if(t1>t2){local temp=t1;t1=t2;t2=temp};if(t1>tmin)tmin=t1;if(t2<tmax)tmax=t2;if(tmin>tmax)return false;if(tmax<0)return false;if(tmin>1)return false};if(fabs(vDt.y)<1.e-8){if((org.y<mins.y-flT)||(org.y>maxs.y+flT))return false}else{local dtI=1.0/vDt.y;local t1=(mins.y-flT-org.y)*dtI;local t2=(maxs.y+flT-org.y)*dtI;if(t1>t2){local temp=t1;t1=t2;t2=temp};if(t1>tmin)tmin=t1;if(t2<tmax)tmax=t2;if(tmin>tmax)return false;if(tmax<0)return false;if(tmin>1)return false};if(fabs(vDt.z)<1.e-8){if((org.z<mins.z-flT)||(org.z>maxs.z+flT))return false}else{local dtI=1.0/vDt.z;local t1=(mins.z-flT-org.z)*dtI;local t2=(maxs.z+flT-org.z)*dtI;if(t1>t2){local temp=t1;t1=t2;t2=temp};if(t1>tmin)tmin=t1;if(t2<tmax)tmax=t2;if(tmin>tmax)return false;if(tmax<0)return false;if(tmin>1)return false};return true}local IsBoxIntersectingRay=VS.IsBoxIntersectingRay;function VS::IsBoxIntersectingRay2(org,mins,maxs,ray,flT=0.0):(IsBoxIntersectingRay){if(!ray.m_IsSwept){local rayMins=ray.m_Start-ray.m_Extents;local rayMaxs=ray.m_Start+ray.m_Extents;if(flT){rayMins.x-=flT;rayMins.y-=flT;rayMins.z-=flT;rayMaxs.x+=flT;rayMaxs.y+=flT;rayMaxs.z+=flT};return IsBoxIntersectingBox(mins,maxs,rayMins,rayMaxs)};return IsBoxIntersectingRay(mins-ray.m_Extents+org,maxs+ray.m_Extents+org,ray.m_Start,ray.m_Delta,flT)}function VS::IntersectRayWithRay(v0,d0,v1,d1){local v0xv1=d0.Cross(d1);local lsq=v0xv1.LengthSqr();if(lsq==0.0)return false;local p1p0=v1-v0;local AxC=p1p0.Cross(v0xv1);VectorNegate(AxC);local detT=AxC.Dot(d1);AxC=p1p0.Cross(v0xv1);VectorNegate(AxC);local detS=AxC.Dot(d0);local invL=1.0/lsq;local t=detT*invL;local s=detS*invL;local i0=v0+d0*t;local i1=v1+d1*s;return(i0.x==i1.x&&i0.y==i1.y&&i0.z==i1.z)}function VS::IntersectRayWithPlane(org,dir,normal,ds){local d=dir.Dot(normal);return d?(ds-org.Dot(normal))/d:0.0}function VS::IsRayIntersectingOBB(ray,org,angles,mins,maxs):(matrix3x4_t,Vector,fabs,Ray_t){if(VectorIsZero(angles))return IsBoxIntersectingRay(org+mins,org+maxs,ray.m_Start,ray.m_Delta);if(ray.m_IsRay){local w2b=matrix3x4_t();AngleIMatrix(angles,org,w2b);local rot=Ray_t.instance();rot.m_Start=Vector();rot.m_Delta=Vector();VectorTransform(ray.m_Start,w2b,rot.m_Start);VectorRotate(ray.m_Delta,w2b,rot.m_Delta);rot.m_StartOffset=Vector();rot.m_Extents=Vector();rot.m_IsRay=true;rot.m_IsSwept=ray.m_IsSwept;return IsBoxIntersectingRay2(rot.m_StartOffset,mins,maxs,rot)};local b2w=matrix3x4_t();ComputeCenterMatrix(org,angles,mins,maxs,b2w);local hsize=(maxs-mins)*0.5;local rayDir=ray.m_Delta*1;rayDir.Norm();local rayDir2=Vector();VectorIRotate(rayDir,b2w,rayDir2);VectorAbs(rayDir2);b2w=b2w.m;local vDt=Vector(b2w[0][3]-ray.m_Start.x,b2w[1][3]-ray.m_Start.y,b2w[2][3]-ray.m_Start.z);local normal,projSum,dtProj;normal=rayDir.Cross(Vector(b2w[0][0],b2w[1][0],b2w[2][0]));dtProj=fabs(normal.Dot(vDt));projSum=rayDir2.z*hsize.y+rayDir2.y*hsize.z+DotProductAbs(normal,ray.m_Extents);if(dtProj>projSum)return false;normal=rayDir.Cross(Vector(b2w[0][1],b2w[1][1],b2w[2][1]));dtProj=fabs(normal.Dot(vDt));projSum=rayDir2.z*hsize.x+rayDir2.x*hsize.z+DotProductAbs(normal,ray.m_Extents);if(dtProj>projSum)return false;normal=rayDir.Cross(Vector(b2w[0][2],b2w[1][2],b2w[2][2]));dtProj=fabs(normal.Dot(vDt));projSum=rayDir2.y*hsize.x+rayDir2.x*hsize.y+DotProductAbs(normal,ray.m_Extents);if(dtProj>projSum)return false;return true}
